/* automatically generated by rust-bindgen 0.69.4 */

pub const CUDA_VERSION: u32 = 12050;
pub type CUdevice_v1 = ::core::ffi::c_int;
pub type CUdevice = CUdevice_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUctx_st {
    _unused: [u8; 0],
}
pub type CUcontext = *mut CUctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type CUstream = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraph_st {
    _unused: [u8; 0],
}
pub type CUgraph = *mut CUgraph_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphNode_st {
    _unused: [u8; 0],
}
pub type CUgraphNode = *mut CUgraphNode_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUgraphExec_st {
    _unused: [u8; 0],
}
pub type CUgraphExec = *mut CUgraphExec_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUptiResult {
    CUPTI_SUCCESS = 0,
    CUPTI_ERROR_INVALID_PARAMETER = 1,
    CUPTI_ERROR_INVALID_DEVICE = 2,
    CUPTI_ERROR_INVALID_CONTEXT = 3,
    CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID = 4,
    CUPTI_ERROR_INVALID_EVENT_ID = 5,
    CUPTI_ERROR_INVALID_EVENT_NAME = 6,
    CUPTI_ERROR_INVALID_OPERATION = 7,
    CUPTI_ERROR_OUT_OF_MEMORY = 8,
    CUPTI_ERROR_HARDWARE = 9,
    CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT = 10,
    CUPTI_ERROR_API_NOT_IMPLEMENTED = 11,
    CUPTI_ERROR_MAX_LIMIT_REACHED = 12,
    CUPTI_ERROR_NOT_READY = 13,
    CUPTI_ERROR_NOT_COMPATIBLE = 14,
    CUPTI_ERROR_NOT_INITIALIZED = 15,
    CUPTI_ERROR_INVALID_METRIC_ID = 16,
    CUPTI_ERROR_INVALID_METRIC_NAME = 17,
    CUPTI_ERROR_QUEUE_EMPTY = 18,
    CUPTI_ERROR_INVALID_HANDLE = 19,
    CUPTI_ERROR_INVALID_STREAM = 20,
    CUPTI_ERROR_INVALID_KIND = 21,
    CUPTI_ERROR_INVALID_EVENT_VALUE = 22,
    CUPTI_ERROR_DISABLED = 23,
    CUPTI_ERROR_INVALID_MODULE = 24,
    CUPTI_ERROR_INVALID_METRIC_VALUE = 25,
    CUPTI_ERROR_HARDWARE_BUSY = 26,
    CUPTI_ERROR_NOT_SUPPORTED = 27,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED = 28,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE = 29,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES = 30,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS = 31,
    CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED = 32,
    CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED = 33,
    CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE = 34,
    CUPTI_ERROR_INSUFFICIENT_PRIVILEGES = 35,
    CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED = 36,
    CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE = 37,
    CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED = 38,
    CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED = 39,
    CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES = 40,
    CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED = 41,
    CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED = 42,
    CUPTI_ERROR_UNKNOWN = 999,
    CUPTI_ERROR_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiGetResultString(
        result: CUptiResult,
        str_: *mut *const ::core::ffi::c_char,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetErrorMessage(
        result: CUptiResult,
        str_: *mut *const ::core::ffi::c_char,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetVersion(version: *mut u32) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackDomain {
    CUPTI_CB_DOMAIN_INVALID = 0,
    CUPTI_CB_DOMAIN_DRIVER_API = 1,
    CUPTI_CB_DOMAIN_RUNTIME_API = 2,
    CUPTI_CB_DOMAIN_RESOURCE = 3,
    CUPTI_CB_DOMAIN_SYNCHRONIZE = 4,
    CUPTI_CB_DOMAIN_NVTX = 5,
    CUPTI_CB_DOMAIN_STATE = 6,
    CUPTI_CB_DOMAIN_SIZE = 7,
    CUPTI_CB_DOMAIN_FORCE_INT = 2147483647,
}
pub type CUpti_CallbackId = u32;
pub type CUpti_CallbackFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
        cbdata: *const ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUpti_Subscriber_st {
    _unused: [u8; 0],
}
pub type CUpti_SubscriberHandle = *mut CUpti_Subscriber_st;
pub type CUpti_DomainTable = *mut CUpti_CallbackDomain;
extern "C" {
    pub fn cuptiSupportedDomains(
        domainCount: *mut usize,
        domainTable: *mut CUpti_DomainTable,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiSubscribe(
        subscriber: *mut CUpti_SubscriberHandle,
        callback: CUpti_CallbackFunc,
        userdata: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiUnsubscribe(subscriber: CUpti_SubscriberHandle) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetCallbackState(
        enable: *mut u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableCallback(
        enable: u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableDomain(
        enable: u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableAllDomains(enable: u32, subscriber: CUpti_SubscriberHandle) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetCallbackName(
        domain: CUpti_CallbackDomain,
        cbid: u32,
        name: *mut *const ::core::ffi::c_char,
    ) -> CUptiResult;
}
pub type CUpti_EventID = u32;
pub type CUpti_EventDomainID = u32;
pub type CUpti_EventGroup = *mut ::core::ffi::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceAttribute {
    CUPTI_DEVICE_ATTR_MAX_EVENT_ID = 1,
    CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID = 2,
    CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH = 3,
    CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE = 4,
    CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION = 5,
    CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS = 6,
    CUPTI_DEVICE_ATTR_PCIE_LINK_RATE = 7,
    CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH = 8,
    CUPTI_DEVICE_ATTR_PCIE_GEN = 9,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS = 10,
    CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE = 11,
    CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE = 12,
    CUPTI_DEVICE_ATTR_MAX_L2_UNITS = 13,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED = 14,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1 = 15,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL = 16,
    CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE = 17,
    CUPTI_DEVICE_ATTR_NVLINK_PRESENT = 18,
    CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW = 19,
    CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT = 20,
    CUPTI_DEVICE_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventDomainAttribute {
    CUPTI_EVENT_DOMAIN_ATTR_NAME = 0,
    CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT = 1,
    CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT = 3,
    CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD = 4,
    CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventGroupAttribute {
    CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID = 0,
    CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES = 1,
    CUPTI_EVENT_GROUP_ATTR_USER_DATA = 2,
    CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS = 3,
    CUPTI_EVENT_GROUP_ATTR_EVENTS = 4,
    CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT = 5,
    CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE = 6,
    CUPTI_EVENT_GROUP_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventAttribute {
    CUPTI_EVENT_ATTR_NAME = 0,
    CUPTI_EVENT_ATTR_SHORT_DESCRIPTION = 1,
    CUPTI_EVENT_ATTR_LONG_DESCRIPTION = 2,
    CUPTI_EVENT_ATTR_CATEGORY = 3,
    CUPTI_EVENT_ATTR_PROFILING_SCOPE = 5,
    CUPTI_EVENT_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCollectionMode {
    CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS = 0,
    CUPTI_EVENT_COLLECTION_MODE_KERNEL = 1,
    CUPTI_EVENT_COLLECTION_MODE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ReadEventFlags {
    CUPTI_EVENT_READ_FLAG_NONE = 0,
    CUPTI_EVENT_READ_FLAG_FORCE_INT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_EventGroupSet {
    pub numEventGroups: u32,
    pub eventGroups: *mut CUpti_EventGroup,
}
#[test]
fn bindgen_test_layout_CUpti_EventGroupSet() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_EventGroupSet> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_EventGroupSet>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_EventGroupSet))
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_EventGroupSet>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_EventGroupSet))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numEventGroups) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSet),
            "::",
            stringify!(numEventGroups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).eventGroups) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSet),
            "::",
            stringify!(eventGroups)
        )
    );
}
impl Default for CUpti_EventGroupSet {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_EventGroupSets {
    pub numSets: u32,
    pub sets: *mut CUpti_EventGroupSet,
}
#[test]
fn bindgen_test_layout_CUpti_EventGroupSets() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_EventGroupSets> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_EventGroupSets>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_EventGroupSets))
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_EventGroupSets>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_EventGroupSets))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numSets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSets),
            "::",
            stringify!(numSets)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sets) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSets),
            "::",
            stringify!(sets)
        )
    );
}
impl Default for CUpti_EventGroupSets {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiSetEventCollectionMode(
        context: CUcontext,
        mode: CUpti_EventCollectionMode,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetAttribute(
        device: CUdevice,
        attrib: CUpti_DeviceAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetNumEventDomains(device: CUdevice, numDomains: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceEnumEventDomains(
        device: CUdevice,
        arraySizeBytes: *mut usize,
        domainArray: *mut CUpti_EventDomainID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetEventDomainAttribute(
        device: CUdevice,
        eventDomain: CUpti_EventDomainID,
        attrib: CUpti_EventDomainAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetNumEventDomains(numDomains: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnumEventDomains(
        arraySizeBytes: *mut usize,
        domainArray: *mut CUpti_EventDomainID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainGetAttribute(
        eventDomain: CUpti_EventDomainID,
        attrib: CUpti_EventDomainAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainGetNumEvents(
        eventDomain: CUpti_EventDomainID,
        numEvents: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainEnumEvents(
        eventDomain: CUpti_EventDomainID,
        arraySizeBytes: *mut usize,
        eventArray: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGetAttribute(
        event: CUpti_EventID,
        attrib: CUpti_EventAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGetIdFromName(
        device: CUdevice,
        eventName: *const ::core::ffi::c_char,
        event: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupCreate(
        context: CUcontext,
        eventGroup: *mut CUpti_EventGroup,
        flags: u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupDestroy(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupGetAttribute(
        eventGroup: CUpti_EventGroup,
        attrib: CUpti_EventGroupAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetAttribute(
        eventGroup: CUpti_EventGroup,
        attrib: CUpti_EventGroupAttribute,
        valueSize: usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupAddEvent(
        eventGroup: CUpti_EventGroup,
        event: CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupRemoveEvent(
        eventGroup: CUpti_EventGroup,
        event: CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupRemoveAllEvents(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupResetAllEvents(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupEnable(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupDisable(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupReadEvent(
        eventGroup: CUpti_EventGroup,
        flags: CUpti_ReadEventFlags,
        event: CUpti_EventID,
        eventValueBufferSizeBytes: *mut usize,
        eventValueBuffer: *mut u64,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupReadAllEvents(
        eventGroup: CUpti_EventGroup,
        flags: CUpti_ReadEventFlags,
        eventValueBufferSizeBytes: *mut usize,
        eventValueBuffer: *mut u64,
        eventIdArraySizeBytes: *mut usize,
        eventIdArray: *mut CUpti_EventID,
        numEventIdsRead: *mut usize,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetsCreate(
        context: CUcontext,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventGroupPasses: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetsDestroy(eventGroupSets: *mut CUpti_EventGroupSets) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetEnable(eventGroupSet: *mut CUpti_EventGroupSet) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetDisable(eventGroupSet: *mut CUpti_EventGroupSet) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableKernelReplayMode(context: CUcontext) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDisableKernelReplayMode(context: CUcontext) -> CUptiResult;
}
pub type CUpti_KernelReplayUpdateFunc = ::core::option::Option<
    unsafe extern "C" fn(
        kernelName: *const ::core::ffi::c_char,
        numReplaysDone: ::core::ffi::c_int,
        customData: *mut ::core::ffi::c_void,
    ),
>;
extern "C" {
    pub fn cuptiKernelReplaySubscribeUpdate(
        updateFunc: CUpti_KernelReplayUpdateFunc,
        customData: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
pub type CUpti_MetricID = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricValueUtilizationLevel {
    CUPTI_METRIC_VALUE_UTILIZATION_IDLE = 0,
    CUPTI_METRIC_VALUE_UTILIZATION_LOW = 2,
    CUPTI_METRIC_VALUE_UTILIZATION_MID = 5,
    CUPTI_METRIC_VALUE_UTILIZATION_HIGH = 8,
    CUPTI_METRIC_VALUE_UTILIZATION_MAX = 10,
    CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricAttribute {
    CUPTI_METRIC_ATTR_NAME = 0,
    CUPTI_METRIC_ATTR_SHORT_DESCRIPTION = 1,
    CUPTI_METRIC_ATTR_LONG_DESCRIPTION = 2,
    CUPTI_METRIC_ATTR_CATEGORY = 3,
    CUPTI_METRIC_ATTR_VALUE_KIND = 4,
    CUPTI_METRIC_ATTR_EVALUATION_MODE = 5,
    CUPTI_METRIC_ATTR_FORCE_INT = 2147483647,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUpti_MetricValue {
    pub metricValueDouble: f64,
    pub metricValueUint64: u64,
    pub metricValueInt64: i64,
    pub metricValuePercent: f64,
    pub metricValueThroughput: u64,
    pub metricValueUtilizationLevel: CUpti_MetricValueUtilizationLevel,
}
#[test]
fn bindgen_test_layout_CUpti_MetricValue() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_MetricValue> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_MetricValue>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_MetricValue))
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_MetricValue>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_MetricValue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metricValueDouble) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueDouble)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metricValueUint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueUint64)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metricValueInt64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueInt64)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metricValuePercent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValuePercent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metricValueThroughput) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueThroughput)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).metricValueUtilizationLevel) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueUtilizationLevel)
        )
    );
}
impl Default for CUpti_MetricValue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricPropertyID {
    CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT = 0,
    CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR = 1,
    CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME = 2,
    CUPTI_METRIC_PROPERTY_CLOCK_RATE = 3,
    CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT = 4,
    CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH = 5,
    CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE = 6,
    CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH = 7,
    CUPTI_METRIC_PROPERTY_PCIE_GEN = 8,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS = 9,
    CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE = 10,
    CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE = 11,
    CUPTI_METRIC_PROPERTY_L2_UNITS = 12,
    CUPTI_METRIC_PROPERTY_ECC_ENABLED = 13,
    CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE = 14,
    CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH = 15,
}
extern "C" {
    pub fn cuptiGetNumMetrics(numMetrics: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnumMetrics(
        arraySizeBytes: *mut usize,
        metricArray: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetNumMetrics(device: CUdevice, numMetrics: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceEnumMetrics(
        device: CUdevice,
        arraySizeBytes: *mut usize,
        metricArray: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetAttribute(
        metric: CUpti_MetricID,
        attrib: CUpti_MetricAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetIdFromName(
        device: CUdevice,
        metricName: *const ::core::ffi::c_char,
        metric: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetNumEvents(metric: CUpti_MetricID, numEvents: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricEnumEvents(
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: *mut usize,
        eventIdArray: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetNumProperties(metric: CUpti_MetricID, numProp: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricEnumProperties(
        metric: CUpti_MetricID,
        propIdArraySizeBytes: *mut usize,
        propIdArray: *mut CUpti_MetricPropertyID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetRequiredEventGroupSets(
        context: CUcontext,
        metric: CUpti_MetricID,
        eventGroupSets: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricCreateEventGroupSets(
        context: CUcontext,
        metricIdArraySizeBytes: usize,
        metricIdArray: *mut CUpti_MetricID,
        eventGroupPasses: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetValue(
        device: CUdevice,
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventValueArraySizeBytes: usize,
        eventValueArray: *mut u64,
        timeDuration: u64,
        metricValue: *mut CUpti_MetricValue,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetValue2(
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventValueArraySizeBytes: usize,
        eventValueArray: *mut u64,
        propIdArraySizeBytes: usize,
        propIdArray: *mut CUpti_MetricPropertyID,
        propValueArraySizeBytes: usize,
        propValueArray: *mut u64,
        metricValue: *mut CUpti_MetricValue,
    ) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ActivityKind {
    CUPTI_ACTIVITY_KIND_INVALID = 0,
    CUPTI_ACTIVITY_KIND_MEMCPY = 1,
    CUPTI_ACTIVITY_KIND_MEMSET = 2,
    CUPTI_ACTIVITY_KIND_KERNEL = 3,
    CUPTI_ACTIVITY_KIND_DRIVER = 4,
    CUPTI_ACTIVITY_KIND_RUNTIME = 5,
    CUPTI_ACTIVITY_KIND_EVENT = 6,
    CUPTI_ACTIVITY_KIND_METRIC = 7,
    CUPTI_ACTIVITY_KIND_DEVICE = 8,
    CUPTI_ACTIVITY_KIND_CONTEXT = 9,
    CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL = 10,
    CUPTI_ACTIVITY_KIND_NAME = 11,
    CUPTI_ACTIVITY_KIND_MARKER = 12,
    CUPTI_ACTIVITY_KIND_MARKER_DATA = 13,
    CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR = 14,
    CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS = 15,
    CUPTI_ACTIVITY_KIND_BRANCH = 16,
    CUPTI_ACTIVITY_KIND_OVERHEAD = 17,
    CUPTI_ACTIVITY_KIND_CDP_KERNEL = 18,
    CUPTI_ACTIVITY_KIND_PREEMPTION = 19,
    CUPTI_ACTIVITY_KIND_ENVIRONMENT = 20,
    CUPTI_ACTIVITY_KIND_EVENT_INSTANCE = 21,
    CUPTI_ACTIVITY_KIND_MEMCPY2 = 22,
    CUPTI_ACTIVITY_KIND_METRIC_INSTANCE = 23,
    CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION = 24,
    CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER = 25,
    CUPTI_ACTIVITY_KIND_FUNCTION = 26,
    CUPTI_ACTIVITY_KIND_MODULE = 27,
    CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE = 28,
    CUPTI_ACTIVITY_KIND_SHARED_ACCESS = 29,
    CUPTI_ACTIVITY_KIND_PC_SAMPLING = 30,
    CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO = 31,
    CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION = 32,
    CUPTI_ACTIVITY_KIND_OPENACC_DATA = 33,
    CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH = 34,
    CUPTI_ACTIVITY_KIND_OPENACC_OTHER = 35,
    CUPTI_ACTIVITY_KIND_CUDA_EVENT = 36,
    CUPTI_ACTIVITY_KIND_STREAM = 37,
    CUPTI_ACTIVITY_KIND_SYNCHRONIZATION = 38,
    CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION = 39,
    CUPTI_ACTIVITY_KIND_NVLINK = 40,
    CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT = 41,
    CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE = 42,
    CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC = 43,
    CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE = 44,
    CUPTI_ACTIVITY_KIND_MEMORY = 45,
    CUPTI_ACTIVITY_KIND_PCIE = 46,
    CUPTI_ACTIVITY_KIND_OPENMP = 47,
    CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API = 48,
    CUPTI_ACTIVITY_KIND_MEMORY2 = 49,
    CUPTI_ACTIVITY_KIND_MEMORY_POOL = 50,
    CUPTI_ACTIVITY_KIND_GRAPH_TRACE = 51,
    CUPTI_ACTIVITY_KIND_JIT = 52,
    CUPTI_ACTIVITY_KIND_COUNT = 53,
    CUPTI_ACTIVITY_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ActivityPCSamplingPeriod {
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID = 0,
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN = 1,
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW = 2,
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID = 3,
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH = 4,
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX = 5,
    CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ActivityUnifiedMemoryCounterScope {
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN = 0,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE = 1,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES = 2,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT = 3,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ActivityUnifiedMemoryCounterKind {
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN = 0,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD = 1,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH = 2,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT = 3,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT = 4,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING = 5,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING = 6,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP = 7,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD = 8,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT = 9,
    CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT = 2147483647,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_ActivityUnifiedMemoryCounterConfig {
    pub scope: CUpti_ActivityUnifiedMemoryCounterScope,
    pub kind: CUpti_ActivityUnifiedMemoryCounterKind,
    pub deviceId: u32,
    pub enable: u32,
}
#[test]
fn bindgen_test_layout_CUpti_ActivityUnifiedMemoryCounterConfig() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_ActivityUnifiedMemoryCounterConfig> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_ActivityUnifiedMemoryCounterConfig>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_ActivityUnifiedMemoryCounterConfig)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_ActivityUnifiedMemoryCounterConfig>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_ActivityUnifiedMemoryCounterConfig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityUnifiedMemoryCounterConfig),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityUnifiedMemoryCounterConfig),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deviceId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityUnifiedMemoryCounterConfig),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityUnifiedMemoryCounterConfig),
            "::",
            stringify!(enable)
        )
    );
}
impl Default for CUpti_ActivityUnifiedMemoryCounterConfig {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_ActivityAutoBoostState {
    pub enabled: u32,
    pub pid: u32,
}
#[test]
fn bindgen_test_layout_CUpti_ActivityAutoBoostState() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_ActivityAutoBoostState> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_ActivityAutoBoostState>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_ActivityAutoBoostState))
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_ActivityAutoBoostState>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_ActivityAutoBoostState))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityAutoBoostState),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityAutoBoostState),
            "::",
            stringify!(pid)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_ActivityPCSamplingConfig {
    pub size: u32,
    pub samplingPeriod: CUpti_ActivityPCSamplingPeriod,
    pub samplingPeriod2: u32,
}
#[test]
fn bindgen_test_layout_CUpti_ActivityPCSamplingConfig() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_ActivityPCSamplingConfig> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_ActivityPCSamplingConfig>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_ActivityPCSamplingConfig))
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_ActivityPCSamplingConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_ActivityPCSamplingConfig))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityPCSamplingConfig),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).samplingPeriod) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityPCSamplingConfig),
            "::",
            stringify!(samplingPeriod)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).samplingPeriod2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ActivityPCSamplingConfig),
            "::",
            stringify!(samplingPeriod2)
        )
    );
}
impl Default for CUpti_ActivityPCSamplingConfig {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Activity {
    pub kind: CUpti_ActivityKind,
}
#[test]
fn bindgen_test_layout_CUpti_Activity() {
    const UNINIT: ::core::mem::MaybeUninit<CUpti_Activity> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CUpti_Activity>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_Activity))
    );
    assert_eq!(
        ::core::mem::align_of::<CUpti_Activity>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Activity))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Activity),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for CUpti_Activity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ExternalCorrelationKind {
    CUPTI_EXTERNAL_CORRELATION_KIND_INVALID = 0,
    CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN = 1,
    CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC = 2,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0 = 3,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1 = 4,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2 = 5,
    CUPTI_EXTERNAL_CORRELATION_KIND_SIZE = 6,
    CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ActivityAttribute {
    CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE = 0,
    CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP = 1,
    CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT = 2,
    CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE = 3,
    CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT = 4,
    CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER = 5,
    CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE = 6,
    CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE = 7,
    CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED = 8,
    CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER = 9,
    CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ActivityThreadIdType {
    CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT = 0,
    CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM = 1,
    CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE = 2,
    CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiGetTimestamp(timestamp: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetContextId(context: CUcontext, contextId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetStreamId(
        context: CUcontext,
        stream: CUstream,
        streamId: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetStreamIdEx(
        context: CUcontext,
        stream: CUstream,
        perThreadStream: u8,
        streamId: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetDeviceId(context: CUcontext, deviceId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphNodeId(node: CUgraphNode, nodeId: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphId(graph: CUgraph, pId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphExecId(graphExec: CUgraphExec, pId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnable(kind: CUpti_ActivityKind) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableAndDump(kind: CUpti_ActivityKind) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityDisable(kind: CUpti_ActivityKind) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableContext(context: CUcontext, kind: CUpti_ActivityKind) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityDisableContext(context: CUcontext, kind: CUpti_ActivityKind)
        -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityGetNumDroppedRecords(
        context: CUcontext,
        streamId: u32,
        dropped: *mut usize,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityGetNextRecord(
        buffer: *mut u8,
        validBufferSizeBytes: usize,
        record: *mut *mut CUpti_Activity,
    ) -> CUptiResult;
}
pub type CUpti_BuffersCallbackRequestFunc = ::core::option::Option<
    unsafe extern "C" fn(buffer: *mut *mut u8, size: *mut usize, maxNumRecords: *mut usize),
>;
pub type CUpti_BuffersCallbackCompleteFunc = ::core::option::Option<
    unsafe extern "C" fn(
        context: CUcontext,
        streamId: u32,
        buffer: *mut u8,
        size: usize,
        validSize: usize,
    ),
>;
extern "C" {
    pub fn cuptiActivityRegisterCallbacks(
        funcBufferRequested: CUpti_BuffersCallbackRequestFunc,
        funcBufferCompleted: CUpti_BuffersCallbackCompleteFunc,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityFlush(context: CUcontext, streamId: u32, flag: u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityFlushAll(flag: u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityGetAttribute(
        attr: CUpti_ActivityAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivitySetAttribute(
        attr: CUpti_ActivityAttribute,
        valueSize: *mut usize,
        value: *mut ::core::ffi::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityConfigureUnifiedMemoryCounter(
        config: *mut CUpti_ActivityUnifiedMemoryCounterConfig,
        count: u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetAutoBoostState(
        context: CUcontext,
        state: *mut CUpti_ActivityAutoBoostState,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityConfigurePCSampling(
        ctx: CUcontext,
        config: *mut CUpti_ActivityPCSamplingConfig,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetLastError() -> CUptiResult;
}
extern "C" {
    pub fn cuptiSetThreadIdType(type_: CUpti_ActivityThreadIdType) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetThreadIdType(type_: *mut CUpti_ActivityThreadIdType) -> CUptiResult;
}
extern "C" {
    pub fn cuptiComputeCapabilitySupported(
        major: ::core::ffi::c_int,
        minor: ::core::ffi::c_int,
        support: *mut ::core::ffi::c_int,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceSupported(dev: CUdevice, support: *mut ::core::ffi::c_int) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceVirtualizationMode {
    CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE = 0,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH = 1,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU = 2,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiDeviceVirtualizationMode(
        dev: CUdevice,
        mode: *mut CUpti_DeviceVirtualizationMode,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiFinalize() -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityPushExternalCorrelationId(
        kind: CUpti_ExternalCorrelationKind,
        id: u64,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityPopExternalCorrelationId(
        kind: CUpti_ExternalCorrelationKind,
        lastId: *mut u64,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableLatencyTimestamps(enable: u8) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityFlushPeriod(time: u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableLaunchAttributes(enable: u8) -> CUptiResult;
}
pub type CUpti_TimestampCallbackFunc = ::core::option::Option<unsafe extern "C" fn() -> u64>;
extern "C" {
    pub fn cuptiActivityRegisterTimestampCallback(
        funcTimestamp: CUpti_TimestampCallbackFunc,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableDeviceGraph(enable: u8) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableDriverApi(cbid: CUpti_CallbackId, enable: u8) -> CUptiResult;
}
extern "C" {
    pub fn cuptiActivityEnableRuntimeApi(cbid: CUpti_CallbackId, enable: u8) -> CUptiResult;
}
